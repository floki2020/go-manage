// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-manage/pkg/ent/personal"
	"go-manage/pkg/ent/predicate"
	"go-manage/pkg/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalUpdate is the builder for updating Personal entities.
type PersonalUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalMutation
}

// Where appends a list predicates to the PersonalUpdate builder.
func (pu *PersonalUpdate) Where(ps ...predicate.Personal) *PersonalUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PersonalUpdate) SetName(s string) *PersonalUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetPhone sets the "phone" field.
func (pu *PersonalUpdate) SetPhone(s string) *PersonalUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PersonalUpdate) SetUserID(i int) *PersonalUpdate {
	pu.mutation.SetUserID(i)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PersonalUpdate) SetNillableUserID(i *int) *PersonalUpdate {
	if i != nil {
		pu.SetUserID(*i)
	}
	return pu
}

// ClearUserID clears the value of the "user_id" field.
func (pu *PersonalUpdate) ClearUserID() *PersonalUpdate {
	pu.mutation.ClearUserID()
	return pu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (pu *PersonalUpdate) SetUsersID(id int) *PersonalUpdate {
	pu.mutation.SetUsersID(id)
	return pu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (pu *PersonalUpdate) SetNillableUsersID(id *int) *PersonalUpdate {
	if id != nil {
		pu = pu.SetUsersID(*id)
	}
	return pu
}

// SetUsers sets the "users" edge to the User entity.
func (pu *PersonalUpdate) SetUsers(u *User) *PersonalUpdate {
	return pu.SetUsersID(u.ID)
}

// Mutation returns the PersonalMutation object of the builder.
func (pu *PersonalUpdate) Mutation() *PersonalMutation {
	return pu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (pu *PersonalUpdate) ClearUsers() *PersonalUpdate {
	pu.mutation.ClearUsers()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PersonalMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonalUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonalUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonalUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PersonalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(personal.Table, personal.Columns, sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(personal.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(personal.FieldPhone, field.TypeString, value)
	}
	if pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personal.UsersTable,
			Columns: []string{personal.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personal.UsersTable,
			Columns: []string{personal.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PersonalUpdateOne is the builder for updating a single Personal entity.
type PersonalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalMutation
}

// SetName sets the "name" field.
func (puo *PersonalUpdateOne) SetName(s string) *PersonalUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetPhone sets the "phone" field.
func (puo *PersonalUpdateOne) SetPhone(s string) *PersonalUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *PersonalUpdateOne) SetUserID(i int) *PersonalUpdateOne {
	puo.mutation.SetUserID(i)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PersonalUpdateOne) SetNillableUserID(i *int) *PersonalUpdateOne {
	if i != nil {
		puo.SetUserID(*i)
	}
	return puo
}

// ClearUserID clears the value of the "user_id" field.
func (puo *PersonalUpdateOne) ClearUserID() *PersonalUpdateOne {
	puo.mutation.ClearUserID()
	return puo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (puo *PersonalUpdateOne) SetUsersID(id int) *PersonalUpdateOne {
	puo.mutation.SetUsersID(id)
	return puo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (puo *PersonalUpdateOne) SetNillableUsersID(id *int) *PersonalUpdateOne {
	if id != nil {
		puo = puo.SetUsersID(*id)
	}
	return puo
}

// SetUsers sets the "users" edge to the User entity.
func (puo *PersonalUpdateOne) SetUsers(u *User) *PersonalUpdateOne {
	return puo.SetUsersID(u.ID)
}

// Mutation returns the PersonalMutation object of the builder.
func (puo *PersonalUpdateOne) Mutation() *PersonalMutation {
	return puo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (puo *PersonalUpdateOne) ClearUsers() *PersonalUpdateOne {
	puo.mutation.ClearUsers()
	return puo
}

// Where appends a list predicates to the PersonalUpdate builder.
func (puo *PersonalUpdateOne) Where(ps ...predicate.Personal) *PersonalUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonalUpdateOne) Select(field string, fields ...string) *PersonalUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Personal entity.
func (puo *PersonalUpdateOne) Save(ctx context.Context) (*Personal, error) {
	return withHooks[*Personal, PersonalMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonalUpdateOne) SaveX(ctx context.Context) *Personal {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonalUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonalUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PersonalUpdateOne) sqlSave(ctx context.Context) (_node *Personal, err error) {
	_spec := sqlgraph.NewUpdateSpec(personal.Table, personal.Columns, sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Personal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personal.FieldID)
		for _, f := range fields {
			if !personal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(personal.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(personal.FieldPhone, field.TypeString, value)
	}
	if puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personal.UsersTable,
			Columns: []string{personal.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personal.UsersTable,
			Columns: []string{personal.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Personal{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
